<SectionTitleSlide as |s|>
  <s.Title>Addons / Packages</s.Title>
</SectionTitleSlide>

<Slide as |s|>
  <Image @of='ts.png' class='w-40'/>

  <s.Notes data-markdown>
    - doing a project of large size? TypeScript
    - helps ensure correctness without having to implement a bunch of superficial, mundane unit tests
    - finds problems at compile time
    - great for projects with multiple team members
  </s.Notes>
</Slide>

<Slide as |s|>
  <s.ContextTitle>
    <ReactWord /> - Adding Typescript
  </s.ContextTitle>

  <div class='flex-row'>
    <div class='has-text-left flex-width-33'>
      <h4 class='has-text-weight-bold'>Webpack</h4>
      <ul class='is-size-3'>
        <li>many options, multiple ways of transpiling typescript</li>
        <li>source-map-loader</li>
      </ul>
    </div>

    <div class='p-l-lg has-text-left flex-width-33'>
      <h4 class='has-text-weight-bold'>Parcel</h4>
      <ul class='is-size-3'>
        <li>Auto-configures itself based on files present
          <br>(only need to add tsconfig.json)
        </li>
      </ul>
    </div>

    <div class='p-l-lg has-text-left flex-width-33'>
      <h4 class='has-text-weight-bold'>create-react-app</h4>
      <ul class='is-size-3'>
        <li>rip out react-scripts and setup webpack</li>
      </ul>
    </div>
  </div>

  <br><br>
  <ul class='is-size-3'>
    <li>Add a tsconfig.json and start using tsx files</li>
    <li>Must research how to configure tsconfig.json</li>
    <li>Manually install types for react, the bundler, router, etc</li>
    <li>Module resolution?????</li>
  </ul>

  <s.Notes data-markdown>
    - webpack is a little easier now with Babel 7 supporting Typescript
    - parcel is hard to debug
    - everyone should go through this at least once. lots of things learned

    - create-react-app might have babel7 + typescript support by the time this presentation is given
  </s.Notes>

</Slide>

<Slide as |s|>
  <s.ContextTitle>
    <span class='ember-color'>Ember</span> - Adding Typescript
  </s.ContextTitle>

  <h4 class='margin-center force-large'>{{code-snippet name='ember-install-typescript.bash'}}</h4>

  <s.Notes data-markdown>
    - Adds Typescript
    - Adds all the types for a default ember app (including testing types)
    - Adds tsconfig with configured paths
    - The only thing it doesn't do is add typescript parsing to eslint
  </s.Notes>
</Slide>

<Slide as |s|>
  <s.ContextTitle>
    <ReactWord /> - Addons
  </s.ContextTitle>

  <s.Title>just npm packages</s.Title>

  <s.Notes data-markdown>
    - super simple (most of the time)
  </s.Notes>
</Slide>


<Slide as |s|>
  <s.ContextTitle>
    <EmberWord /> - Addons
  </s.ContextTitle>

  <s.Title>npm packages ... with conventions</s.Title>
  <s.Notes data-markdown>
    - addons in ember can...
  </s.Notes>
</Slide>

<BulletSlide @text='hook in to the build pipeline' />
<BulletSlide @text='install other addons' />
<BulletSlide @text='provide additional cli functionality' />
<BulletSlide @text='provide blueprints for generating files' />
<BulletSlide @text='add files to build directories' @subtext='such as styles or other assets' />
